local cmds = require('commands')
local desc =
[[

This script is a work in progress, not yet functional. It is an attempt to use the raw-writing 
capabilities already present within the devices

]]

print(desc)

-- Some raw data
local rawdata = "6000F57b" --mf_auth
local TIMEOUT = 2000 -- Shouldn't take longer than 2 seconds

function show(usbpacket)
	if usbpacket then
		local response = Command.parse(usbpacket)
		print(response)
	end
end

-- Want to do both connect and send raw, so we should AND the two commands
-- ISO14A_COMMAND.ISO14A_RAW(8) and ISO14A_CONNECT (1). However, we don't have a 
-- bitlib yet, so we'll do it manually, 1 & 8 == 9
-- ISO14A_NO_DISCONNECT = 2 ==> 11

print(string.len(rawdata))
local command = Command:new{cmd = cmds.CMD_READER_ISO_14443a, 
									arg1 = 3, -- Connect (1) and don't disconnect (2)
									arg2 = 0
                  }
local mf_auth = Command:new{cmd = cmds.CMD_READER_ISO_14443a, 
									arg1 = 10, -- Send raw 
									-- arg2 contains the length. 
									-- Remember; rawdata is an ascii string containing
									-- ASCII characters. Thus; rawdata= "FF" are two bytes in length
									-- but when converted to true hexvalues internally inside the Command 
									-- constructor, 0xFF is only one byte. So, the bytelength is the 
									-- length of the ASCII-string divided by two. Thanks jonor!

									arg2 = string.len(rawdata)/2, 
									data = rawdata}
local quit = Command:new{cmd = cmds.CMD_READER_ISO_14443a, 
									arg1 = 0, -- Nothing 
									}
									
core.clearCommandBuffer()
--print("Sending")
--print(command)
local err = core.SendCommand(command:getBytes())
if err then
	print(err)
	return nil, err
end
local cardselect = core.WaitForResponseTimeout(cmds.CMD_ACK,TIMEOUT)
print("Card select:")
show(cardselect)
--local response = core.WaitForResponseTimeout(cmds.CMD_ACK,TIMEOUT)
--print("Raw response:")
--show(response)

local answer = ""
while answer ~='q' do
  	
	local err = core.SendCommand(mf_auth:getBytes())
		if err then
			print(err)
			return nil, err
		end
	local nonce = core.WaitForResponseTimeout(cmds.CMD_ACK,TIMEOUT)
	print("Nonce:")
	show(nonce)
  	io.write("Write q to quit, hit any char to get a nonce ")
  	io.flush()
  	answer=io.read(1)

end--]]

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































local cmds = require('commands')
local getopt = require('getopt')
local bin = require('bin')
local utils = require('utils')

local format=string.format
local floor=math.floor

example =[[
	1. script run test_t55x7_ask
]]
author = "Iceman"
usage = "script run test_t55x7_ask"
desc =[[
This script will program a T55x7 TAG with the configuration: block 0x00 data 0x000100
The outlined procedure is as following:

--ASK 
	00 00 80 40
--           max 2
--        manchester
--     bit rate
 
"lf t55xx write 0 00008040"
"lf t55xx detect"
"lf t55xx info"

Loop:
	change the configuretion block 0 with:
    -xx 00 xxxx = RF/8 
    -xx 04 xxxx = RF/16
	-xx 08 xxxx = RF/32
	-xx 0C xxxx = RF/40
	-xx 10 xxxx = RF/50
	-xx 14 xxxx = RF/64
	-xx 18 xxxx = RF/100
	-xx 1C xxxx = RF/128


testsuit for the ASK/MANCHESTER demod

Arguments:
	-h             : this help
]]

local TIMEOUT = 2000 -- Shouldn't take longer than 2 seconds
local DEBUG = true -- the debug flag

--BLOCK 0 = 00008040 ASK / MAN
local config1 = '00'
local config2 = '8040'

local procedurecmds = {
	[1] = '%s%02X%s',
	[2] = 'lf t55xx detect',
	[3] = 'lf t55xx info',
}
--- 
-- A debug printout-function
function dbg(args)
	if not DEBUG then
		return
	end
	
    if type(args) == "table" then
		local i = 1
		while args[i] do
			dbg(args[i])
			i = i+1
		end
	else
		print("###", args)
	end	
end	
--- 
-- This is only meant to be used when errors occur
function oops(err)
	print("ERROR: ",err)
end
--- 
-- Usage help
function help()
	print(desc)
	print("Example usage")
	print(example)
end
--
-- Exit message
function ExitMsg(msg)
	print( string.rep('--',20) )
	print( string.rep('--',20) )
	print(msg)
	print()
end

function test()
	local y
	for y = 0x0, 0x1d, 0x4 do
		for _ = 1, #procedurecmds do
			local pcmd = procedurecmds[_]
			
			if #pcmd == 0 then  
			
			elseif _ == 1 then

				local config = pcmd:format(config1, y, config2)
				dbg(('lf t55xx write 0 %s'):format(config))			
				config = tonumber(config,16) 
				
				local writecmd = Command:new{cmd = cmds.CMD_T55XX_WRITE_BLOCK, arg1 = config}			
				local err = core.SendCommand(writecmd:getBytes())
				if err then return oops(err) end
				local response = core.WaitForResponseTimeout(cmds.CMD_ACK,TIMEOUT)

			else
				dbg(pcmd)
				core.console( pcmd )
			end			
		end
		core.clearCommandBuffer()	
	end
	print( string.rep('--',20) )
end

local function main(args)

	print( string.rep('--',20) )
	print( string.rep('--',20) )

	-- Arguments for the script
	for o, arg in getopt.getopt(args, 'h') do
		if o == "h" then return help() end
	end

	core.clearCommandBuffer()
	test()
	print( string.rep('--',20) )
end
main(args)





























































































































































































































































































































































































































































































































































































































































































































































































































































































	1. script run tnp3dump
	2. script run tnp3dump -n
	3. script run tnp3dump -k aabbccddeeff
	4. script run tnp3dump -k aabbccddeeff -n
	5. script run tnp3dump -o myfile 
	6. script run tnp3dump -n -o myfile 
	7. script run tnp3dump -k aabbccddeeff -n -o myfile 
]]
author = "Iceman"
usage = "script run tnp3dump -k <key> -n -o <filename>"
desc =[[
This script will try to dump the contents of a Mifare TNP3xxx card.
It will need a valid KeyA in order to find the other keys and decode the card.
Arguments:
	-h             : this help
	-k <key>       : Sector 0 Key A.
	-n             : Use the nested cmd to find all keys
	-o             : filename for the saved dumps
]]

local HASHCONSTANT = '20436F707972696768742028432920323031302041637469766973696F6E2E20416C6C205269676874732052657365727665642E20'
